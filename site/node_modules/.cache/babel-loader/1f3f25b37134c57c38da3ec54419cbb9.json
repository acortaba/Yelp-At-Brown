{"ast":null,"code":"var _jsxFileName = \"/Users/antoniocortabarria/Desktop/CS32/term-project-acortaba-fleahy-scortaba-spawar2/site/src/components/pages/Ratty.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../styles/Pages.css';\nimport { MyMenu } from './Menu';\nimport { firebaseConfig } from '../../firebase';\nimport { initializeApp } from \"firebase/app\";\nimport { doc, getFirestore, collection, where, getDoc, query, getDocs } from \"firebase/firestore\"; // Accessibility Labels\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TEXT_diningHeader_accessible_name = 'Ratty'; // Global Variables\n\nlet FoodList = [[]];\nlet FoodMap = new Map();\n/**\n * function that pulls Sharpe Refectory specific meals that were webscraped from firebase and updates foodlist and foodmap\n */\n\nasync function populateFoodList() {\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n  const docRef123 = collection(db, \"today food\");\n  const q = query(docRef123, where(\"dininghall\", \"==\", \"Sharpe Refectory\"));\n  const docRef = doc(db, 'today food', 'Cheese Pizza Andrews');\n  const docSnap = await getDoc(docRef); // updates food list with pulled data\n\n  console.log(console.log(\"Read at 27-----------------Ratty\"));\n  const food = await getDocs(q).then(r => r.docs.forEach(doc => {\n    const data = doc.data();\n\n    if (!FoodMap.has(data.food)) {\n      FoodMap.set(data.food, []);\n      FoodList.push([data.food, '0']);\n    }\n  }));\n}\n/**\n  * runs the main method of this class (populateFoodList) that updates food list for Sharpe Refectory\n  * @returns the html of the Sharpe Refectory page. This html also contains an updated version of the food list\n  */\n\n\nexport function Ratty() {\n  _s();\n\n  const [foods, setFoods] = useState([]);\n\n  async function loadFoods() {\n    await populateFoodList();\n    setFoods(FoodList);\n  }\n\n  loadFoods();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'background-box',\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        \"aria-label\": TEXT_diningHeader_accessible_name,\n        children: \"Ratty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MyMenu, {\n        myFoods: FoodList,\n        diningHall: \"Sharpe Refectory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Ratty, \"A0FpdaM17REA0/HwhpzJgeR+Ckg=\");\n\n_c = Ratty;\nexport default Ratty;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ratty\");","map":{"version":3,"names":["React","useState","MyMenu","firebaseConfig","initializeApp","doc","getFirestore","collection","where","getDoc","query","getDocs","TEXT_diningHeader_accessible_name","FoodList","FoodMap","Map","populateFoodList","app","db","docRef123","q","docRef","docSnap","console","log","food","then","r","docs","forEach","data","has","set","push","Ratty","foods","setFoods","loadFoods"],"sources":["/Users/antoniocortabarria/Desktop/CS32/term-project-acortaba-fleahy-scortaba-spawar2/site/src/components/pages/Ratty.tsx"],"sourcesContent":["import React, {useState, Dispatch, SetStateAction, useEffect} from 'react';\nimport cheerio from 'cheerio';\nimport '../styles/Pages.css'\nimport {MyMenu} from './Menu'\nimport {firebaseConfig} from '../../firebase'\nimport { initializeApp } from \"firebase/app\";\nimport { doc, getFirestore, setDoc,collection, where, getDoc, query, queryEqual, getDocs, deleteDoc } from \"firebase/firestore\"; \n\n// Accessibility Labels\nexport const TEXT_diningHeader_accessible_name  = 'Ratty'\n\n// Global Variables\n  let FoodList: string[][] = [[]]\n  let FoodMap: Map<String, String[]> = new Map();\n\n/**\n * function that pulls Sharpe Refectory specific meals that were webscraped from firebase and updates foodlist and foodmap\n */\nasync function populateFoodList(){\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app)\n    const docRef123 = collection(db,\"today food\")\n    const q = query(docRef123, where(\"dininghall\", \"==\", \"Sharpe Refectory\"));\n    const docRef = doc(db, 'today food', 'Cheese Pizza Andrews');\n    const docSnap = await getDoc(docRef);\n    // updates food list with pulled data\n    console.log(console.log(\"Read at 27-----------------Ratty\"))\n    const food= await getDocs(q).then(r => r.docs.forEach((doc) => {\n        const data = doc.data()\n        if (!FoodMap.has(data.food)){\n            FoodMap.set(data.food,[])\n            FoodList.push([data.food, '0'])\n        }\n    }))\n }\n\n /**\n   * runs the main method of this class (populateFoodList) that updates food list for Sharpe Refectory\n   * @returns the html of the Sharpe Refectory page. This html also contains an updated version of the food list\n   */\n export function Ratty() {\n    const [foods, setFoods] = useState<string[][]>([]);\n    async function loadFoods(){\n        await populateFoodList()\n        setFoods(FoodList)\n    }\n        loadFoods()   \n\n\n    return (\n        <div className ={\"background\"}>\n            <div className={'background-box'}>\n                <h1 aria-label = {TEXT_diningHeader_accessible_name}>Ratty</h1>\n                <MyMenu myFoods={FoodList} diningHall = {\"Sharpe Refectory\"}/>               \n            </div>\n        </div>\n\n    )\n}\n\nexport default Ratty;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAAmE,OAAnE;AAEA,OAAO,qBAAP;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,GAAT,EAAcC,YAAd,EAAmCC,UAAnC,EAA+CC,KAA/C,EAAsDC,MAAtD,EAA8DC,KAA9D,EAAiFC,OAAjF,QAA2G,oBAA3G,C,CAEA;;;AACA,OAAO,MAAMC,iCAAiC,GAAI,OAA3C,C,CAEP;;AACE,IAAIC,QAAoB,GAAG,CAAC,EAAD,CAA3B;AACA,IAAIC,OAA8B,GAAG,IAAIC,GAAJ,EAArC;AAEF;AACA;AACA;;AACA,eAAeC,gBAAf,GAAiC;EAC7B,MAAMC,GAAG,GAAGb,aAAa,CAACD,cAAD,CAAzB;EACA,MAAMe,EAAE,GAAGZ,YAAY,CAACW,GAAD,CAAvB;EACA,MAAME,SAAS,GAAGZ,UAAU,CAACW,EAAD,EAAI,YAAJ,CAA5B;EACA,MAAME,CAAC,GAAGV,KAAK,CAACS,SAAD,EAAYX,KAAK,CAAC,YAAD,EAAe,IAAf,EAAqB,kBAArB,CAAjB,CAAf;EACA,MAAMa,MAAM,GAAGhB,GAAG,CAACa,EAAD,EAAK,YAAL,EAAmB,sBAAnB,CAAlB;EACA,MAAMI,OAAO,GAAG,MAAMb,MAAM,CAACY,MAAD,CAA5B,CAN6B,CAO7B;;EACAE,OAAO,CAACC,GAAR,CAAYD,OAAO,CAACC,GAAR,CAAY,kCAAZ,CAAZ;EACA,MAAMC,IAAI,GAAE,MAAMd,OAAO,CAACS,CAAD,CAAP,CAAWM,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAgBxB,GAAD,IAAS;IAC3D,MAAMyB,IAAI,GAAGzB,GAAG,CAACyB,IAAJ,EAAb;;IACA,IAAI,CAAChB,OAAO,CAACiB,GAAR,CAAYD,IAAI,CAACL,IAAjB,CAAL,EAA4B;MACxBX,OAAO,CAACkB,GAAR,CAAYF,IAAI,CAACL,IAAjB,EAAsB,EAAtB;MACAZ,QAAQ,CAACoB,IAAT,CAAc,CAACH,IAAI,CAACL,IAAN,EAAY,GAAZ,CAAd;IACH;EACJ,CANsC,CAArB,CAAlB;AAOF;AAED;AACD;AACA;AACA;;;AACC,OAAO,SAASS,KAAT,GAAiB;EAAA;;EACrB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnC,QAAQ,CAAa,EAAb,CAAlC;;EACA,eAAeoC,SAAf,GAA0B;IACtB,MAAMrB,gBAAgB,EAAtB;IACAoB,QAAQ,CAACvB,QAAD,CAAR;EACH;;EACGwB,SAAS;EAGb,oBACI;IAAK,SAAS,EAAG,YAAjB;IAAA,uBACI;MAAK,SAAS,EAAE,gBAAhB;MAAA,wBACI;QAAI,cAAczB,iCAAlB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,MAAD;QAAQ,OAAO,EAAEC,QAAjB;QAA2B,UAAU,EAAI;MAAzC;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AASH;;GAlBgBqB,K;;KAAAA,K;AAoBjB,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}