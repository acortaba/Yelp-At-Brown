{"ast":null,"code":"var _jsxFileName = \"/Users/antoniocortabarria/Desktop/CS32/term-project-acortaba-fleahy-scortaba-spawar2/site/src/components/pages/Menu.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Pages.css';\nimport { initializeApp } from \"firebase/app\";\nimport { doc, getFirestore, setDoc, getDoc } from \"firebase/firestore\";\nimport { firebaseConfig } from '../firebase'; //Accessibility Labels and Global Variables \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TEXT_inputRating_accessible_name = 'Rating Input';\nexport const TEXT_submit_button_accessible_name = 'Submit Your Rating';\nexport const TEXT_submit_button_text = 'Submit Your Rating';\nexport const TEXT_ratingText_accessible_name = 'FOOD_RATING_VALUE';\nexport var FoodMap = new Map(); // Rating Input interface\n\n/**\n   * Function that takes in an input\n   * @returns an instance of ControlledInputProps\n   */\nfunction ControlledInput(_ref) {\n  let {\n    input: value,\n    setValue,\n    ariaLabel\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: ev => setValue(ev.target.value),\n    \"aria-label\": ariaLabel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n}\n/**\n  * Function for Assigning unique ids to store ratings and date of\n  * @returns a unique string\n  */\n\n\n_c = ControlledInput;\n\nfunction genUniqueId() {\n  const dateStr = Date.now().toString(36); // convert num to base 36 and stringify\n\n  const randomStr = Math.random().toString(36).substring(2, 8); // start at index 2 to skip decimal point\n\n  return `${dateStr}-${randomStr}`;\n}\n/**\n * Asynch Function that updates the firebase rating for an item \n * @params foodItem - string name of food, newRating - string rating, diningHall - string name \n */\n\n\nasync function updateItem(foodItem, newRating, diningHall) {\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n  const docRef = doc(db, \"today food\", foodItem + \" \" + diningHall);\n  var numID = genUniqueId();\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n    //console.log(\"Document data:\", docSnap.data());\n    var mydict = docSnap.data().rating; //console.log(\"this is the dict before: \"+mydict)\n\n    mydict[numID] = newRating; //console.log(\"this is the dict after: \"+mydict)\n\n    console.log(mydict[0]);\n    setDoc(docRef, {\n      food: docSnap.data().food,\n      dininghall: docSnap.data().dininghall,\n      rating: mydict,\n      type: docSnap.data().type\n    }, {\n      merge: true\n    });\n  } else {\n    console.log(\"unsuccessful push to firebase\");\n  }\n}\n/**\n * PrintedMenu makes a box with the foodName, average rating and an input box to input your own rating\n * @param input : string with the name of the food\n * @param diningHall : string with the name of the dininghall\n * @returns a box with the info for that food item\n */\n\n\nexport function PrintedMenu(_ref2) {\n  _s();\n\n  let {\n    input,\n    diningHall\n  } = _ref2;\n  const [myInput, setMyInput] = useState('');\n  const [foodName, setFoodName] = useState(input[0]);\n  const [foodRating, setRating] = useState(0);\n  var avRat = 0;\n\n  async function pullRating() {\n    let RatingMap = await getDict(foodName, diningHall);\n    avRat = getAverageRating(RatingMap);\n\n    if (isNaN(avRat)) {\n      console.log('No rating found');\n      setRating('unrated');\n    } else {\n      setRating(avRat);\n    }\n  }\n\n  pullRating();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"foodBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"foodText\",\n      \"aria-label\": input[0],\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: foodName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rating\",\n      \"aria-label\": TEXT_ratingText_accessible_name,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Average Rating: \", foodRating]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"inputRatingText\",\n        children: \"Your Rating:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ControlledInput, {\n        input: myInput,\n        setValue: setMyInput,\n        ariaLabel: TEXT_inputRating_accessible_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (myInput == \"1\" || myInput == \"2\" || myInput == \"3\" || myInput == \"4\" || myInput == \"5\" || myInput == \"0\") {\n              FoodMap.set(input[0], [myInput]); //this doesn't work actually but ughhhh\n              // currRating.set(input[0],Number(myInput))\n\n              setRating(Number(myInput)); //  console.log(FoodMap)\n\n              updateItem(input[0], myInput, diningHall);\n              setMyInput('Response Recorded');\n            } else {\n              setMyInput('Enter integer 0-5');\n            }\n          },\n          \"aria-label\": TEXT_submit_button_accessible_name,\n          children: TEXT_submit_button_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 1\n  }, this);\n}\n/**\n * Gets the average rating for the food by summing and dividing the ratings from firebase\n * @param mydict list of all the ratings for that food item\n * @returns average of all those ratings\n */\n\n_s(PrintedMenu, \"vICkJkGJXeMIIQLh0bKYUOs8u5I=\");\n\n_c2 = PrintedMenu;\n\nfunction getAverageRating(mydict) {\n  const size = Object.values(mydict).length;\n  console.log(\"this is the value; \" + size);\n  var sum = 0; //console.log(\"this is it\"+ Object.keys(mydict).length)\n\n  for (let value of Object.values(mydict)) {\n    console.log(value);\n    sum += parseInt(value);\n  }\n\n  console.log(\"this is the sum; \" + sum);\n  console.log(\"this is the avf; \" + sum / size);\n  let myAverage = sum / size;\n  return Math.round((myAverage + Number.EPSILON) * 100) / 100;\n}\n/**\n * \n * @param foodItem \n * @param diningHall \n * @returns \n */\n\n\nasync function getDict(foodItem, diningHall) {\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n  const docRef = doc(db, \"today food\", foodItem + \" \" + diningHall);\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n    console.log(\"Document data:\", docSnap.data().rating); //console.log(Object.keys(docSnap.data().rating).length)\n\n    let mydict = docSnap.data().rating; //console.log(\"this is the dict before rating \"+ docSnap.data().rating)\n\n    return mydict;\n  } else {\n    console.log(\"something aint right\");\n    let myMap = new Map([[\"key1\", \"1\"], [\"key2\", \"2\"]]);\n    return myMap;\n  }\n} //React was being weird about calling functions in this so I just made a button and console logged stuff \n//but it's always empty \n//I'll work on doing it normally later, I just wanted to see if I could get the food list to show up even in the console\n\n\nexport function MyMenu(_ref3) {\n  _s2();\n\n  let {\n    myFoods,\n    diningHall\n  } = _ref3;\n  const [foods, setFoods] = useState([]);\n  const [FoodList, setFoodList] = useState([[]]);\n  useEffect(() => {\n    console.log(\"getting menu\");\n    setFoodList(myFoods);\n    setFoods(myFoods);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menuBox\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: foods.filter(food => food.length >= 1).map((food, index) => /*#__PURE__*/_jsxDEV(PrintedMenu, {\n        input: food,\n        diningHall: diningHall\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 74\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(MyMenu, \"c8dZdei+61EufnGBq0JuWyhw4pk=\");\n\n_c3 = MyMenu;\nexport default MyMenu;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ControlledInput\");\n$RefreshReg$(_c2, \"PrintedMenu\");\n$RefreshReg$(_c3, \"MyMenu\");","map":{"version":3,"names":["React","useState","useEffect","initializeApp","doc","getFirestore","setDoc","getDoc","firebaseConfig","TEXT_inputRating_accessible_name","TEXT_submit_button_accessible_name","TEXT_submit_button_text","TEXT_ratingText_accessible_name","FoodMap","Map","ControlledInput","input","value","setValue","ariaLabel","ev","target","genUniqueId","dateStr","Date","now","toString","randomStr","Math","random","substring","updateItem","foodItem","newRating","diningHall","app","db","docRef","numID","docSnap","exists","mydict","data","rating","console","log","food","dininghall","type","merge","PrintedMenu","myInput","setMyInput","foodName","setFoodName","foodRating","setRating","avRat","pullRating","RatingMap","getDict","getAverageRating","isNaN","set","Number","size","Object","values","length","sum","parseInt","myAverage","round","EPSILON","myMap","MyMenu","myFoods","foods","setFoods","FoodList","setFoodList","filter","map","index"],"sources":["/Users/antoniocortabarria/Desktop/CS32/term-project-acortaba-fleahy-scortaba-spawar2/site/src/components/pages/Menu.tsx"],"sourcesContent":["import React, {useState, Dispatch, SetStateAction, useEffect} from 'react';\nimport '../styles/Pages.css'\nimport { initializeApp } from \"firebase/app\";\nimport { doc, getFirestore, setDoc,collection, where, getDoc, query, queryEqual, getDocs, deleteDoc, updateDoc} from \"firebase/firestore\"; \nimport {firebaseConfig} from '../firebase'\n\n\n//Accessibility Labels and Global Variables \nexport const TEXT_inputRating_accessible_name = 'Rating Input'\nexport const TEXT_submit_button_accessible_name = 'Submit Your Rating'\nexport const TEXT_submit_button_text =  'Submit Your Rating'\nexport const TEXT_ratingText_accessible_name = 'FOOD_RATING_VALUE'\nexport var FoodMap: Map<String, String[]> = new Map();\n\n// Rating Input interface\ninterface ControlledInputProps {\n    input: string, \n    setValue: Dispatch<SetStateAction<string>> \n    ariaLabel: string \n  }\n\n/**\n   * Function that takes in an input\n   * @returns an instance of ControlledInputProps\n   */\nfunction ControlledInput({input: value, setValue, ariaLabel}: ControlledInputProps) {\n    return (\n      <input value = {value} \n             onChange={(ev) => setValue(ev.target.value)}\n             aria-label={ariaLabel}\n             ></input>\n    );\n  }\n\n  \n /**\n   * Function for Assigning unique ids to store ratings and date of\n   * @returns a unique string\n   */\n  function genUniqueId(): string {\n    const dateStr = Date\n      .now()\n      .toString(36); // convert num to base 36 and stringify\n  \n    const randomStr = Math\n      .random()\n      .toString(36)\n      .substring(2, 8); // start at index 2 to skip decimal point\n  \n    return `${dateStr}-${randomStr}`;\n  }\n\n  /**\n   * Asynch Function that updates the firebase rating for an item \n   * @params foodItem - string name of food, newRating - string rating, diningHall - string name \n   */\n  async function updateItem(foodItem: string, newRating : string, diningHall : string){\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app)\n    const docRef = doc(db,\"today food\",foodItem + \" \" + diningHall)\n    var numID = genUniqueId();\n   const docSnap = await getDoc(docRef);\n   \n   if (docSnap.exists()) {\n     //console.log(\"Document data:\", docSnap.data());\n     var mydict= docSnap.data().rating\n     //console.log(\"this is the dict before: \"+mydict)\n     mydict[numID] = newRating\n     //console.log(\"this is the dict after: \"+mydict)\n     \n     console.log(mydict[0])\n     setDoc(docRef, {\n      food: docSnap.data().food, \n      dininghall: docSnap.data().dininghall,\n      rating: mydict,\n      type: docSnap.data().type\n   }, { merge: true });\n   \n  }\n  else{\n    console.log(\"unsuccessful push to firebase\")\n  }\n   \n}\n  \n/**\n * PrintedMenu makes a box with the foodName, average rating and an input box to input your own rating\n * @param input : string with the name of the food\n * @param diningHall : string with the name of the dininghall\n * @returns a box with the info for that food item\n */\nexport function PrintedMenu( {input, diningHall}: {input: string[], diningHall : string}) {\n    const [myInput, setMyInput] = useState<string>('');\n    const [foodName, setFoodName] = useState<string>(input[0]);\n    const [foodRating, setRating] = useState<number|string>(0);\n\n  \n    var avRat=0\n    async function pullRating(){\n        let RatingMap:Map<string, string> = await getDict(foodName, diningHall)\n        avRat = getAverageRating(RatingMap)\n        if (isNaN(avRat)) {\n            console.log('No rating found')\n            setRating('unrated')\n        }else{\n            setRating(avRat)            \n        }\n    }\n        pullRating(); \n\n    return (\n<div className={\"foodBox\"}>\n        <div className = {\"foodText\"} aria-label={input[0]}>\n            <p><b>{foodName}</b></p>\n        </div>\n        <div className = {\"rating\"} aria-label={TEXT_ratingText_accessible_name}>    \n            <p>Average Rating: {foodRating}</p>\n            <p className = {\"inputRatingText\"}>Your Rating:</p> \n            <ControlledInput input={myInput} setValue={setMyInput} ariaLabel={TEXT_inputRating_accessible_name}/>    \n        <div>\n          <button onClick={() => {  \n              if(myInput == \"1\" ||myInput == \"2\"||myInput == \"3\"||myInput == \"4\"||myInput == \"5\"||myInput == \"0\") {\n                FoodMap.set(input[0], [myInput]) //this doesn't work actually but ughhhh\n                // currRating.set(input[0],Number(myInput))\n                setRating(Number(myInput))\n              //  console.log(FoodMap)\n                updateItem(input[0], myInput, diningHall)\n\n                setMyInput('Response Recorded')\n            }\n          else{\n            setMyInput('Enter integer 0-5')\n          }}}\n            aria-label={TEXT_submit_button_accessible_name}>\n            {TEXT_submit_button_text}\n          </button>\n        </div>\n        <br></br>\n      </div>\n      </div>\n    );\n  }\n\n  /**\n   * Gets the average rating for the food by summing and dividing the ratings from firebase\n   * @param mydict list of all the ratings for that food item\n   * @returns average of all those ratings\n   */\n  function getAverageRating(mydict: Map<string,string>){\n    const size=Object.values(mydict).length\n    console.log(\"this is the value; \"+ size)\n    var sum=0;\n    //console.log(\"this is it\"+ Object.keys(mydict).length)\n    for (let value of Object.values(mydict)) {\n      console.log(value);                 \n      sum+=parseInt(value)\n  }\n  console.log(\"this is the sum; \"+ sum)\n  console.log(\"this is the avf; \"+ sum/size)\n  let myAverage = sum/size\n    return Math.round((myAverage + Number.EPSILON) * 100) / 100\n  }\n  \n  /**\n   * \n   * @param foodItem \n   * @param diningHall \n   * @returns \n   */\n  async function getDict(foodItem: string, diningHall : string){\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app)\n    \n    const docRef = doc(db,\"today food\",foodItem + \" \" + diningHall)\n \n   const docSnap = await getDoc(docRef);\n   \n   if (docSnap.exists()) {\n     console.log(\"Document data:\", (docSnap.data().rating));\n     //console.log(Object.keys(docSnap.data().rating).length)\n     let mydict:Map<string, string>= docSnap.data().rating\n     //console.log(\"this is the dict before rating \"+ docSnap.data().rating)\n    return mydict\n  }\n  else{\n    console.log(\"something aint right\")\n    let myMap = new Map<string, string>([\n      [\"key1\", \"1\"],\n      [\"key2\", \"2\"]\n  ]);\n    return myMap\n  }\n}\n  \n\n\n //React was being weird about calling functions in this so I just made a button and console logged stuff \n //but it's always empty \n //I'll work on doing it normally later, I just wanted to see if I could get the food list to show up even in the console\nexport function MyMenu({myFoods, diningHall}: {myFoods: string[][], diningHall : string}) {\n      const [foods, setFoods] = useState<string[][]>([]);\n      const [FoodList, setFoodList] = useState<string[][]>([[]])\n\n      useEffect(()=> {\n            console.log(\"getting menu\")\n            setFoodList(myFoods)\n            setFoods(myFoods)   \n      }, [])\n\n      return (\n        <div className={\"menuBox\"}>\n          <div>\n              {foods.filter(food => food.length >= 1).map((food,index) =><PrintedMenu input={food} key={index} diningHall = {diningHall}/>)}\n          </div>\n        </div>\n      );  \n    }\n\n\n  \n\nexport default MyMenu;"],"mappings":"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"},"metadata":{},"sourceType":"module"}